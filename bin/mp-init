#!/usr/bin/env node

const Handlebars = require('handlebars')
// 交互式命令行
const inquirer = require('inquirer')
// 修改控制台字符串的样式
const chalk = require('chalk')
// node 内置文件模块
const fs = require('fs')
const { resolve } = require('path')
const path = require('path')
const { run } = require('runjs')
// 读取根目录下的 template.json
var htmlTemplet='';
var packagejsonTemplet='';
var cssTemplet='';
var jsTemplet='';
var isInitOp;
// 没用第二个参数 说明是初始化
if(process.argv && !process.argv[2]){
    try {
        const gulpfile = `${resolve('./')}/gulpfile.js`;
        fs.accessSync(gulpfile, fs.constants.F_OK);
        console.log(chalk.red(`您已经mp init过，无需再init。您是否想mp add?`))
        process.exit(1)
    }catch (err) {
        if(err){
            if(err.code==='ENOENT'){
                console.log('即将进行初始化操作')
                isInitOp=true;

            }else {
                console.log(chalk.red(`检测gulp文件存不存在时出错了${err}`))
                process.exit(1)
            }
        }



    }
}else {

    isInitOp=false;
    console.log('即将新增页面')
}
// console.log('resolve',resolve('./'))
// console.log('cwd       : ' + process.cwd())
// console.log('__dirname : ' + __dirname)

// 读取文件操作
fs.readFile(`${__dirname}/../template/doNotChangeIt.html`, null, function(error, data) {
    if(error){
        console.log('读取doNotChangeIt.html文件出错了'+error)
    }else {
        htmlTemplet=data.toString()
        // console.log('成功读取index.html'+htmlTemplet)



    }

})
if (isInitOp){
    fs.readFile(`${__dirname}/../template/package.json`, function(error, data) {
        if(error){
            console.log('读取package.json文件出错了'+error)
        }else {
            packagejsonTemplet=data.toString()



        }

    })
}
fs.readFile(`${__dirname}/../template/doNotChangeIt.css`, null, function(error, data) {
    if(error){
        console.log('读取doNotChangeIt.css文件出错了'+error)
    }else {
        cssTemplet=data.toString()
        // console.log('成功读取index.html'+htmlTemplet)
        // console.log('读取doNotChangeIt.css==cssTemplet:'+cssTemplet)
    }

})
fs.readFile(`${__dirname}/../template/doNotChangeIt.js`, null, function(error, data) {
    if(error){
        console.log('读取doNotChangeIt.js文件出错了'+error)
    }else {
        jsTemplet=data.toString()
        // console.log('成功读取index.html'+htmlTemplet)


    }

})

// 拷贝文件

// function copyFile(src, dist) {
//     fs.writeFileSync(dist, fs.readFileSync(src));
// }
function copyFile(fromFileSrc, toFileSrc) {
    return new Promise(((resolve, reject) => {
        try {
            // 默认情况下将创建或覆盖目标文件。
            fs.copyFileSync(fromFileSrc, toFileSrc);
            // fs.createReadStream(src).pipe(fs.createWriteStream(dist));
            console.log(chalk.green(`从${fromFileSrc}拷贝至${toFileSrc}成功。`))
            resolve()

        }catch (err) {
            console.log(chalk.red(`从${fromFileSrc}拷贝至${toFileSrc}出错了${err}`))
            reject(err)
        }

    }))

}

// 检测目录并创建目录
// checkDirAndMkDir=(folderpath)=>{
//     const pathArr=folderpath.split('/');
//     let _path='';
//     for(let i=0;i<pathArr.length;i++){
//         if(pathArr[i]){
//             _path +=`/${pathArr[i]}`;
//             if (!fs.existsSync(_path)) {
//                 fs.mkdirSync(_path);
//             }
//         }
//     }
// }


/**
 * 读取路径信息
 * @param {string} path 路径
 */
function getStat(path){
    return new Promise((resolve, reject) => {
        fs.stat(path, (err, stats) => {
            if(err){
                resolve(false);
            }else{
                resolve(stats);
            }
        })
    })
}

/**
 * 创建路径
 * @param {string} dir 路径
 */
function mkdir(dir){
    return new Promise((resolve, reject) => {
        fs.mkdir(dir, err => {
            if(err){
                resolve(false);
            }else{
                resolve(true);
            }
        })
    })
}

/**
 * 路径是否存在，不存在则创建
 * @param {string} dir 路径
 */
async function dirExists(dir){
    let isExists = await getStat(dir);
    //如果该路径且不是文件，返回true
    if(isExists && isExists.isDirectory()){
        return true;
    }else if(isExists){     //如果该路径存在但是文件，返回false
        return false;
    }
    //如果该路径不存在
    let tempDir = path.parse(dir).dir;      //拿到上级路径
    //递归判断，如果上级目录也不存在，则会代码会在此处继续循环执行，直到目录存在
    let status = await dirExists(tempDir);
    let mkdirStatus;
    if(status){
        mkdirStatus = await mkdir(dir);
    }
    return mkdirStatus;
}





// var data = { "name": "Alan",
//     "hometown": "Somewhere, TX",
//     "kids": [{"name": "Jimmy", "age": "12"}, {"name": "Sally", "age": "4"}]
// };
//
// var result = htmlHandlebarsComp(data);





// 自定义交互式命令行的问题及简单的校验
let question = [
    {
        name: "projectName",
        type: 'input',
        message: "请输入项目名称(要求英文)，方便错误监控识别",
        validate (val) {
            if (val === '') return '项目名称为必填项!'
            if (/\W/.test(val)) return '项目名称要求为英文!'
            return true
        }
    },
    {
        name: "fileName",
        type: 'input',
        message: "请输入html/css/js的文件名",
        validate (val) {
            if (val === '') return 'html/css/js文件名为必填项!'
            return true
        }
    },
    {
        name: "title",
        type: 'input',
        message: "请输入页面标题title",
        validate (val) {
            if (val === '') return '页面标题title为必填项!'
            return true
        }
    },
    {
        name: "apikey",
        type: 'input',
        message: "请输入您的fundebug的apikey",
        validate (apikey) {
            if (apikey === '') {
                return 'apikey为必填项!'
            }else if (apikey.length<64){
                return 'apikey位数小于64!'
            }else {
                return true
            }
        }
    },
    {
        name: "isInjectJQ",
        type: 'confirm',
        message: "是否引入jQuery？"
        // validate (apikey) {
        //     if (apikey === '') {
        //         return 'apikey为必填项!'
        //     }else if (apikey.length<64){
        //         return 'apikey位数小于64!'
        //     }else {
        //         return true
        //     }
        // }
    }

]

inquirer.prompt(question).then(answers => {
    // answers 就是用户输入的内容，是个对象
    let {projectName,fileName,title,apikey,isInjectJQ } = answers;

    var htmlHandlebarsComp = Handlebars.compile(htmlTemplet);
    var packagejsonHandlebarsComp = Handlebars.compile(packagejsonTemplet);

    var htmlResult = htmlHandlebarsComp(answers);
    var packagejsonResult = packagejsonHandlebarsComp(answers);

// console.log('answers====',answers)
// console.log('htmlTemplet====',htmlTemplet)
// // 过滤 unicode 字符
// htmlTemplet[name] = url.replace(/[\u0000-\u0019]/g, '')
// // 把模板信息写入 template.json 文件中
// fs.writeFile(`${__dirname}/../template.json`, JSON.stringify(htmlTemplet), 'utf-8', err => {
//     if (err) console.log(err)
// console.log('\n')
// console.log(chalk.green('Added successfully!\n'))
// console.log(chalk.grey('The latest template list is: \n'))
// console.log(htmlTemplet)
// console.log('\n')
// })
    async function creatHTMLCssJs(){
// 生成html文件
        async function creatHtml(){
            await dirExists(`${resolve('./')}/workspace`);
            fs.writeFile(`${resolve('./')}/workspace/${fileName}.html`, htmlResult, 'utf8', err => {
                if (err) console.log(err)
                console.log('\n')
                console.log(chalk.green(`在${resolve('./')}/workspace下成功新建了${fileName}.html文件\n`))
// console.log(chalk.grey('请不要移动项目文件哦\n'))

// console.log('\n')
            })

        }
        await creatHtml()
        if(isInitOp){
            // 生成package.json文件
            async function creatPackagejson(){
                fs.access(`${resolve('./')}/package.json`, fs.constants.F_OK, async (err) => {
                    if(err){
                        if(err.code==='ENOENT'){
                            fs.writeFile(`${resolve('./')}/package.json`, packagejsonResult, 'utf8', err => {
                                if (err) console.log('创建package.json出错了',err)
                                console.log('\n')
                                console.log(chalk.green(`在${resolve('./')}下成功新建了package.json文件\n`))
                            })
                        }else {
                            console.log('访问package.json出错了',err)
                        }

                    }
                });
            }
            await creatPackagejson()
        }
// 生成css文件
        async function creatCss(){
            await dirExists(`${resolve('./')}/workspace/css`);
            fs.writeFile(`${resolve('./')}/workspace/css/${fileName}.css`,cssTemplet , 'utf8', err => {
                if (err) console.log(err)
                console.log('\n')
                console.log(chalk.green(`在${resolve('./')}/workspace/css下成功新建了${fileName}.css文件\n`))
            })

        }
        await creatCss()
// 生成js文件
        async function creatJS(){
            await dirExists(`${resolve('./')}/workspace/js`);
            fs.writeFile(`${resolve('./')}/workspace/js/${fileName}.js`,jsTemplet , 'utf8', err => {
                if (err) console.log(err)
                console.log('\n')
                console.log(chalk.green(`在${resolve('./')}/workspace/js下成功新建了${fileName}.js文件\n`))
                if(isInitOp){
                    console.log(chalk.blue(`即将安装npm依赖包，安装完后您可执行gulp或npm run dev启动项目`))
                    run(`npm install`)
                }

            })
        }
        await  creatJS()

        if(isInitOp){
            // 具备检测是否存在的拷贝文件功能
            async function copyFileBeforeCheck(fromFileSrc,toFileSrc,toFileSrcSubDir){
                fs.access(toFileSrc, fs.constants.F_OK, async (err) => {
                    if(err){
                        if(err.code==='ENOENT'){
                            // copyFile(`${__dirname}/../gulpfile.js`,`${resolve('./')}/gulpfile.js`)
                            if(toFileSrcSubDir){
                                await dirExists(toFileSrcSubDir);
                            }
                            await copyFile(fromFileSrc,toFileSrc)
                        }else {
                            console.log('拷贝'+fromFileSrc+'出错了:',err)
                        }
                    }
                });
            }
            await copyFileBeforeCheck(`${__dirname}/../template/jQuery.v1.12.4.js`,`${resolve('./')}/workspace/js/notchange/jQuery.v1.12.4.js`,`${resolve('./')}/workspace/js/notchange/`)
            await copyFileBeforeCheck(`${__dirname}/../gulpfile.js`,`${resolve('./')}/gulpfile.js`)

        }

    }

    creatHTMLCssJs()

// // 写入文件
// var  writerStream = fs.createWriteStream(`${fileName}.html`);
// writerStream.write(htmlResult.toString(), 'UTF8');
// writerStream.end();

})

// 输入fundebug apikey
// 输入项目名称
// 输入文件名名称
// 输入网页标题

